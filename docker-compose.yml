services:
  database:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: privatecal-db
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-calendar_db}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      ENABLE_MIGRATIONS: "true"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations:ro
    ports:
      - "5432:5432"
    networks:
      - privatecal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME:-calendar_db}"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.optimized
      args:
        BUILDAH_FORMAT: docker
    container_name: privatecal-backend
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - NTFY_SERVER_URL=${NTFY_SERVER_URL}
      - NTFY_TOPIC_PREFIX=${NTFY_TOPIC_PREFIX}
      - NTFY_AUTH_TOKEN=${NTFY_AUTH_TOKEN}
      - EMAIL_ENABLED=${EMAIL_ENABLED}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS}
      - EMAIL_FROM_NAME=${EMAIL_FROM_NAME}
      - APP_BASE_URL=${APP_BASE_URL}
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - privatecal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-/api}
    container_name: privatecal-frontend
    ports:
      - "80:8080"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - privatecal-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  privatecal-network:
    driver: bridge